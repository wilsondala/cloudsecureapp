# .github/workflows/deploy.yml

name: Deploy na AWS via OIDC

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: 202853071953
  AWS_REGION: us-east-1
  ECR_REPOSITORY: cloudsecureapp

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS com OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::202853071953:role/GITHUB_DEPLOY_ROLE
          aws-region: ${{ env.AWS_REGION }}

      - name: Verificar identidade atual da AWS
        run: aws sts get-caller-identity

      - name: Login no Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build da imagem Docker
        run: docker build -t $ECR_REPOSITORY .

      - name: Tag da imagem para o ECR
        run: docker tag $ECR_REPOSITORY:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      - name: Push da imagem para o ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      # Descomente as linhas abaixo se quiser aplicar Terraform no deploy:
      # - name: Instalar Terraform
      #   uses: hashicorp/setup-terraform@v2
      #
      # - name: Terraform Init
      #   run: terraform init ./terraform
      #
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve -var="image_tag=latest" -var="aws_region=$AWS_REGION" ./terraform
